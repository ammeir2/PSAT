// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sampleQuadraticMVTcpp
NumericMatrix sampleQuadraticMVTcpp(NumericVector init, NumericVector mean, NumericMatrix precision, double threshold, int nSamples, int burnin, int trim);
RcppExport SEXP PSAT_sampleQuadraticMVTcpp(SEXP initSEXP, SEXP meanSEXP, SEXP precisionSEXP, SEXP thresholdSEXP, SEXP nSamplesSEXP, SEXP burninSEXP, SEXP trimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type trim(trimSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleQuadraticMVTcpp(init, mean, precision, threshold, nSamples, burnin, trim));
    return rcpp_result_gen;
END_RCPP
}
// sampleLogisticCpp
NumericMatrix sampleLogisticCpp(NumericVector y, NumericMatrix X, NumericVector Xy, NumericVector Xp, NumericVector probs, NumericVector beta, double intercept, NumericMatrix testMat, double threshold, int nSamples, int burnin, int trim, NumericVector returnY);
RcppExport SEXP PSAT_sampleLogisticCpp(SEXP ySEXP, SEXP XSEXP, SEXP XySEXP, SEXP XpSEXP, SEXP probsSEXP, SEXP betaSEXP, SEXP interceptSEXP, SEXP testMatSEXP, SEXP thresholdSEXP, SEXP nSamplesSEXP, SEXP burninSEXP, SEXP trimSEXP, SEXP returnYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xy(XySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xp(XpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type testMat(testMatSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type nSamples(nSamplesSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type trim(trimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type returnY(returnYSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleLogisticCpp(y, X, Xy, Xp, probs, beta, intercept, testMat, threshold, nSamples, burnin, trim, returnY));
    return rcpp_result_gen;
END_RCPP
}
